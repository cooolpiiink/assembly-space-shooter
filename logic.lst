Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 22:44:33
logic.asm						     Page 1 - 1


				; #########################################################################
				;
				;   logic.asm - Assembly file for EECS205 Assignment 4/5
				;
				;
				; #########################################################################

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include stars.inc	
			      C ; #########################################################################
			      C ;
			      C ;   stars.inc - Includes for EECS205 Assignment 1
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
			      C DrawStarReg PROTO STDCALL ; Renders a star in the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate
			      C                         ;      edi = y-coordinate
			      C 
			      C DrawAllStars PROTO STDCALL ; Routine which uses DrawStarReg to create all the stars
			      C 
			      C EXTERNDEF STDCALL WinMain : NEAR
			      C 
				    include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
 00000010		      C _EECS205BITMAP STRUCT
 00000000  00000000	      C  dwWidth      DWORD  ?
 00000004  00000000	      C  dwHeight     DWORD  ?
 00000008  00		      C  bTransparent BYTE   ?
 00000009  00000003 [	      C               BYTE   3 DUP(?)
	    00
	   ]
 0000000C  00000000	      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
				    include trig.inc
			      C ; #########################################################################
			      C ;
			      C ;   trig.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C ;; FIXED is a fixed point number (16 bit integer and 16 bit fractional components)
			      C ;;    To convert a FIXED value in eax into an integer:  sar eax, 16
			      C ;;    To convert an integer value in eax into a FIXED:  shl eax, 16
			      C FIXED TYPEDEF DWORD
			      C 
			      C EXTERNDEF SINTAB:WORD 
			      C 
			      C FixedSin PROTO STDCALL dwAngle:FIXED 
			      C FixedCos PROTO STDCALL dwAngle:FIXED
			      C 
			      C 
			      C 
			      C 
			      C 
				    include rotate.inc	
			      C ; #########################################################################
			      C ;
			      C ;   rotate.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
			      C _EECS205BITMAP STRUCT
			      C  dwWidth      DWORD  ?
			      C  dwHeight     DWORD  ?
			      C  bTransparent BYTE   ?
			      C               BYTE   3 DUP(?)
			      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
			      C 
			      C BasicBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD
			      C 
			      C RotateBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD, angle:DWORD
			      C 
			      C FixedMult PROTO val1:FIXED, val2:FIXED
			      C 
				    include game.inc
			      C ; #########################################################################
			      C ;
			      C ;   game.inc - Includes for EECS205 Assignment 4/5
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C ;; These are library routines that you will call (but do NOT have to implement)
			      C BeginDraw PROTO
			      C EndDraw PROTO
			      C 
			      C ;; You should not need to modify these prototypes (actually, it would probably be bad)
			      C GameInit PROTO
			      C GameMain PROTO mouseStatus:DWORD, keyDown:DWORD, keyUp:DWORD
			      C 
			      C ;; Useful Library Routines
			      C DrawString PROTO x:DWORD, y:DWORD, string:PTR BYTE 
			      C DrawInt PROTO x:DWORD, y:DWORD, value:DWORD
			      C 
			      C ;; Feel free to modify the following
			      C GameRender PROTO
			      C GameLogic PROTO key:DWORD, ship1:DWORD, ship2:DWORD, ship3:DWORD, exp:DWORD, a1:DWORD, a3:DWORD, cage:DWORD
			      C 
			      C EXTERNDEF lpTyroneBmp : DWORD
			      C 
 00000018		      C _SPRITE STRUCT
 00000000  00000000	      C 	x DWORD ?
 00000004  00000000	      C 	y DWORD ?
 00000008  00000000	      C 	a DWORD ?
 0000000C  00000001	      C 	alive DWORD 1
 00000010  00000001	      C 	visible DWORD 1
 00000014  00000000	      C 	bmpPtr DWORD ?
			      C _SPRITE ENDS
			      C 
			      C SPRITE TYPEDEF _SPRITE
			      C 
			      C EXTERNDEF asteroid1:SPRITE
			      C EXTERNDEF asteroid2:SPRITE
			      C EXTERNDEF asteroid3:SPRITE
			      C EXTERNDEF cage1:SPRITE
			      C EXTERNDEF cage2:SPRITE
			      C EXTERNDEF ship:SPRITE
			      C EXTERNDEF projectile:SPRITE
			      C EXTERNDEF shot:DWORD
			      C EXTERNDEF over:DWORD
			      C EXTERNDEF num_loops:DWORD
			      C 
				    include keys.inc		
			      C ;;
			      C ;; keys.inc -- These are virtual key codes to
			      C ;; captuer any keystrokes you desire
			      C 
 = 00000008		      C VK_BACK                              equ 8h
 = 00000003		      C VK_CANCEL                            equ 3h
 = 00000014		      C VK_CAPITAL                           equ 14h
 = 0000000C		      C VK_CLEAR                             equ 0Ch
 = 00000011		      C VK_CONTROL                           equ 11h
 = 0000002E		      C VK_DELETE                            equ 2Eh
 = 00000028		      C VK_DOWN                              equ 28h
 = 00000023		      C VK_END                               equ 23h
 = 0000001B		      C VK_ESCAPE                            equ 1Bh
 = 0000002B		      C VK_EXECUTE                           equ 2Bh
 = 0000002F		      C VK_HELP                              equ 2Fh
 = 00000024		      C VK_HOME                              equ 24h
 = 0000002D		      C VK_INSERT                            equ 2Dh
 = 00000001		      C VK_LBUTTON                           equ 1h
 = 00000025		      C VK_LEFT                              equ 25h
 = 00000004		      C VK_MBUTTON                           equ 4h
 = 00000012		      C VK_MENU                              equ 12h
 = 00000022		      C VK_NEXT                              equ 22h
 = 00000013		      C VK_PAUSE                             equ 13h
 = 00000022		      C VK_PGDN                              equ 22h
 = 00000021		      C VK_PGUP                              equ 21h
 = 0000002A		      C VK_PRINT                             equ 2Ah
 = 00000021		      C VK_PRIOR                             equ 21h
 = 00000002		      C VK_RBUTTON                           equ 2h
 = 0000000D		      C VK_RETURN                            equ 0Dh
 = 00000027		      C VK_RIGHT                             equ 27h
 = 00000029		      C VK_SELECT                            equ 29h
 = 00000010		      C VK_SHIFT                             equ 10h
 = 0000002C		      C VK_SNAPSHOT                          equ 2Ch
 = 00000020		      C VK_SPACE                             equ 20h
 = 00000009		      C VK_TAB                               equ 9h
 = 00000026		      C VK_UP                                equ 26h
 = 00000060		      C VK_NUMPAD0                           equ 60h
 = 00000061		      C VK_NUMPAD1                           equ 61h
 = 00000062		      C VK_NUMPAD2                           equ 62h
 = 00000063		      C VK_NUMPAD3                           equ 63h
 = 00000064		      C VK_NUMPAD4                           equ 64h
 = 00000065		      C VK_NUMPAD5                           equ 65h
 = 00000066		      C VK_NUMPAD6                           equ 66h
 = 00000067		      C VK_NUMPAD7                           equ 67h
 = 00000068		      C VK_NUMPAD8                           equ 68h
 = 00000069		      C VK_NUMPAD9                           equ 69h
 = 0000006A		      C VK_MULTIPLY                          equ 6Ah
 = 0000006B		      C VK_ADD                               equ 6Bh
 = 0000006C		      C VK_SEPARATOR                         equ 6Ch
 = 0000006D		      C VK_SUBTRACT                          equ 6Dh
 = 0000006E		      C VK_DECIMAL                           equ 6Eh
 = 0000006F		      C VK_DIVIDE                            equ 6Fh
 = 00000070		      C VK_F1                                equ 70h
 = 00000071		      C VK_F2                                equ 71h
 = 00000072		      C VK_F3                                equ 72h
 = 00000073		      C VK_F4                                equ 73h
 = 00000074		      C VK_F5                                equ 74h
 = 00000075		      C VK_F6                                equ 75h
 = 00000076		      C VK_F7                                equ 76h
 = 00000077		      C VK_F8                                equ 77h
 = 00000078		      C VK_F9                                equ 78h
 = 00000079		      C VK_F10                               equ 79h
 = 0000007A		      C VK_F11                               equ 7Ah
 = 0000007B		      C VK_F12                               equ 7Bh
 = 0000007C		      C VK_F13                               equ 7Ch
 = 0000007D		      C VK_F14                               equ 7Dh
 = 0000007E		      C VK_F15                               equ 7Eh
 = 0000007F		      C VK_F16                               equ 7Fh
 = 00000080		      C VK_F17                               equ 80h
 = 00000081		      C VK_F18                               equ 81h
 = 00000082		      C VK_F19                               equ 82h
 = 00000083		      C VK_F20                               equ 83h
 = 00000084		      C VK_F21                               equ 84h
 = 00000085		      C VK_F22                               equ 85h
 = 00000086		      C VK_F23                               equ 86h
 = 00000087		      C VK_F24                               equ 87h
 = 00000090		      C VK_NUMLOCK                           equ 90h
 = 00000091		      C VK_SCROLL                            equ 91h
 = 000000A0		      C VK_LSHIFT                            equ 0A0h
 = 000000A1		      C VK_RSHIFT                            equ 0A1h
 = 000000A2		      C VK_LCONTROL                          equ 0A2h
 = 000000A3		      C VK_RCONTROL                          equ 0A3h
 = 000000A4		      C VK_LMENU                             equ 0A4h
 = 000000A5		      C VK_RMENU                             equ 0A5h
 = 000000F6		      C VK_ATTN                              equ 0F6h
 = 000000F7		      C VK_CRSEL                             equ 0F7h
 = 000000F8		      C VK_EXSEL                             equ 0F8h
 = 000000F9		      C VK_EREOF                             equ 0F9h
 = 000000FA		      C VK_PLAY                              equ 0FAh
 = 000000FB		      C VK_ZOOM                              equ 0FBh
 = 000000FC		      C VK_NONAME                            equ 0FCh
 = 000000FD		      C VK_PA1                               equ 0FDh
 = 000000FE		      C VK_OEM_CLEAR                         equ 0FEh
 = 00000030		      C VK_0						 equ 30h
 = 00000031		      C VK_1						 equ 31h
 = 00000032		      C VK_2						 equ 32h
 = 00000033		      C VK_3						 equ 33h
 = 00000034		      C VK_4						 equ 34h
 = 00000035		      C VK_5						 equ 35h
 = 00000036		      C VK_6						 equ 36h
 = 00000037		      C VK_7						 equ 37h
 = 00000038		      C VK_8						 equ 38h
 = 00000039		      C VK_9						 equ 39h
 = 00000041		      C VK_A						 equ 41h
 = 00000042		      C VK_B						 equ 42h
 = 00000043		      C VK_C						 equ 43h
 = 00000044		      C VK_D						 equ 44h
 = 00000045		      C VK_E						 equ 45h
 = 00000046		      C VK_F						 equ 46h
 = 00000047		      C VK_G						 equ 47h
 = 00000048		      C VK_H						 equ 48h
 = 00000049		      C VK_I						 equ 49h
 = 0000004A		      C VK_J						 equ 4Ah
 = 0000004B		      C VK_K						 equ 4Bh
 = 0000004C		      C VK_L						 equ 4Ch
 = 0000004D		      C VK_M						 equ 4Dh
 = 0000004E		      C VK_N						 equ 4Eh
 = 0000004F		      C VK_O						 equ 4Fh
 = 00000050		      C VK_P						 equ 50h
 = 00000051		      C VK_Q						 equ 51h
 = 00000052		      C VK_R						 equ 52h
 = 00000053		      C VK_S						 equ 53h
 = 00000054		      C VK_T						 equ 54h
 = 00000055		      C VK_U						 equ 55h
 = 00000056		      C VK_V						 equ 56h
 = 00000057		      C VK_W						 equ 57h
 = 00000058		      C VK_X						 equ 58h
 = 00000059		      C VK_Y						 equ 59h
 = 0000005A		      C VK_Z						 equ 5Ah
			      C 
					
 00000000			.DATA


 = 00000064			FIXED_ANGLE_ROTATE = 00000100
 = 0000000A			PROJECTILE_ACCEL = 10
 00000000 70 65 77 2E 77	pew BYTE "pew.wav",0
	   61 76 00
 00000008 65 78 70 6C 6F	explosion_sound BYTE "explosion.wav",0
	   73 69 6F 6E 2E
	   77 61 76 00
 00000016 73 63 72 65 61	yelling BYTE "scream.wav",0
	   6D 2E 77 61 76
	   00
					
 00000000			.CODE

				EXTERNDEF STDCALL PlaySoundA : NEAR
				PlaySoundA PROTO STDCALL :DWORD, :DWORD, :DWORD
 = PlaySoundA			PlaySound equ <PlaySoundA>

 = 00000001			SND_ASYNC = 1h
 = 00020000			SND_FILENAME = 20000h
					
				;; Define the function GameLogic

				MoveShip PROTO shipArg: PTR SPRITE, key:DWORD
				Shoot PROTO
				CheckCollision PROTO
				UpdateEnemyPos PROTO a1:DWORD, a3:DWORD, cage:DWORD, exp:DWORD
				GameReset PROTO a1:DWORD, a3:DWORD, cage:DWORD

 00000000			GameLogic PROC USES ecx key:DWORD, ship1:DWORD, ship2:DWORD, ship3:DWORD, exp:DWORD, a1:DWORD, a3:DWORD, cage:DWORD

 00000004  8B 4D 0C			mov ecx, ship1
 00000007  3B 0D 00000014 E		cmp ecx, ship.bmpPtr
 0000000D  74 0B			je changeship2
 0000000F  8B 4D 10			mov ecx, ship2
 00000012  3B 0D 00000014 E		cmp ecx, ship.bmpPtr
 00000018  74 0B			je changeship3
					
 0000001A			changeship2:
 0000001A  8B 4D 10			mov ecx, ship2
 0000001D  89 0D 00000014 E		mov ship.bmpPtr, ecx
 00000023  EB 09			jmp sprite_same

 00000025			changeship3:
 00000025  8B 4D 14			mov ecx, ship3
 00000028  89 0D 00000014 E		mov ship.bmpPtr, ecx
					
 0000002E			sprite_same:
 0000002E  8B 4D 08			mov ecx, key
 00000031  83 F9 20			cmp ecx, VK_SPACE
 00000034  75 07			jne move
					;; if space need to shoot projectile and play sound
					INVOKE Shoot
 0000003B  EB 0D			jmp finish_up
					
 0000003D			move:	
					INVOKE MoveShip, offset ship, key
 0000004A			finish_up:	
 0000004A  83 3D 00000000 E		cmp shot, 0
	   00
 00000051  74 07			je done
 00000053  83 2D 00000004 E		sub projectile.y, PROJECTILE_ACCEL
	   0A
 0000005A			done:
					INVOKE CheckCollision
					INVOKE UpdateEnemyPos, a1, a3, cage, exp
					ret
 00000075			GameLogic ENDP

 00000075			UpdateEnemyPos PROC USES ebx a1:DWORD, a3:DWORD, cage:DWORD, exp:DWORD

 00000079  8B 5D 14			mov ebx, exp
					
 0000007C  81 3D 00000004 E		cmp cage1.y, 1500
	   000005DC
 00000086  7F 32			jg reset
 00000088  81 3D 00000004 E		cmp cage2.y, 1500
	   000005DC
 00000092  7F 26			jg reset
 00000094  81 3D 00000004 E		cmp asteroid1.y, 1500
	   000005DC
 0000009E  7F 1A			jg reset
 000000A0  81 3D 00000004 E		cmp asteroid2.y, 650
	   0000028A
 000000AA  7F 0E			jg reset
 000000AC  81 3D 00000004 E		cmp asteroid3.y, 1500
	   000005DC
 000000B6  7F 02			jg reset
 000000B8  EB 14			jmp update
 000000BA			reset:
 000000BA  FF 05 00000000 E		inc num_loops
					INVOKE GameReset, a1, a3, cage
 000000CE			update:
 000000CE  83 3D 0000000C E		cmp cage1.alive, 0
	   00
 000000D5  74 10			je c1dead
 000000D7  83 05 00000004 E		add cage1.y, 1
	   01
 000000DE  83 05 00000008 E		add cage1.a, FIXED_ANGLE_ROTATE
	   64
 000000E5  EB 23			jmp c2
 000000E7			c1dead:
 000000E7  83 3D 00000010 E		cmp cage1.visible, 0
	   00
 000000EE  74 1A			je c2
 000000F0  39 1D 00000014 E		cmp cage1.bmpPtr, ebx
 000000F6  74 08			je c1done
 000000F8  89 1D 00000014 E		mov cage1.bmpPtr, ebx
 000000FE  EB 0A			jmp c2
 00000100			c1done:
 00000100  C7 05 00000010 E		mov cage1.visible, 0
	   00000000
 0000010A			c2:	
 0000010A  83 3D 0000000C E		cmp cage2.alive, 0
	   00
 00000111  74 0E			je c2dead
 00000113  83 05 00000004 E		add cage2.y, 1
	   01
 0000011A  83 2D 00000008 E		sub cage2.a, FIXED_ANGLE_ROTATE
	   64
 00000121			c2dead:
 00000121  83 3D 00000010 E		cmp cage2.visible, 0
	   00
 00000128  74 1A			je as1
 0000012A  39 1D 00000014 E		cmp cage2.bmpPtr, ebx
 00000130  74 08			je c2done
 00000132  89 1D 00000014 E		mov cage2.bmpPtr, ebx
 00000138  EB 0A			jmp as1
 0000013A			c2done:	
 0000013A  C7 05 00000010 E		mov cage2.visible, 0
	   00000000
 00000144			as1:	
 00000144  83 3D 0000000C E		cmp asteroid1.alive, 0
	   00
 0000014B  74 0E			je as1dead
 0000014D  83 05 00000004 E		add asteroid1.y, 1
	   01
 00000154  83 2D 00000008 E		sub asteroid1.a, FIXED_ANGLE_ROTATE
	   64
 0000015B			as1dead:
 0000015B  83 3D 00000010 E		cmp asteroid1.visible, 0
	   00
 00000162  74 1A			je  as2
 00000164  39 1D 00000014 E		cmp asteroid1.bmpPtr, ebx
 0000016A  74 08			je as1done
 0000016C  89 1D 00000014 E		mov asteroid1.bmpPtr, ebx
 00000172  EB 0A			jmp as2
 00000174			as1done:	
 00000174  C7 05 00000010 E		mov asteroid1.visible, 0
	   00000000
 0000017E			as2:
 0000017E  83 3D 0000000C E		cmp asteroid2.alive, 0
	   00
 00000185  74 31			je as3
 00000187  83 05 00000004 E		add asteroid2.y, 1
	   01
 0000018E  83 05 00000008 E		add asteroid2.a, FIXED_ANGLE_ROTATE
	   64
 00000195			as2dead:
 00000195  83 3D 00000010 E		cmp asteroid2.visible, 0
	   00
 0000019C  74 1A			je as3
 0000019E  39 1D 00000014 E		cmp asteroid2.bmpPtr, ebx
 000001A4  74 08			je as2done
 000001A6  89 1D 00000014 E		mov asteroid2.bmpPtr, ebx
 000001AC  EB 0A			jmp as3
 000001AE			as2done:
 000001AE  C7 05 00000010 E		mov asteroid2.visible, 0
	   00000000
 000001B8			as3:
 000001B8  83 3D 0000000C E		cmp asteroid3.alive, 0
	   00
 000001BF  74 31			je done
 000001C1  83 05 00000004 E		add asteroid3.y, 1
	   01
 000001C8  83 2D 00000008 E		sub asteroid3.a, FIXED_ANGLE_ROTATE
	   64
 000001CF			as3dead:
 000001CF  83 3D 00000010 E		cmp asteroid3.visible, 0
	   00
 000001D6  74 1A			je done
 000001D8  39 1D 00000014 E		cmp asteroid3.bmpPtr, ebx
 000001DE  74 08			je as3done
 000001E0  89 1D 00000014 E		mov asteroid3.bmpPtr, ebx
 000001E6  EB 0A			jmp done
 000001E8			as3done:	
 000001E8  C7 05 00000010 E		mov asteroid3.visible, 0
	   00000000
 000001F2			done:	
					ret
 000001F7			UpdateEnemyPos ENDP

 000001F7			GameReset PROC USES eax ebx a1:DWORD, a3:DWORD, cage:DWORD
					;; move correct bitmaps back in case they are explosions
 000001FC  8B 5D 08			mov ebx, a1
 000001FF  89 1D 00000014 E		mov asteroid1.bmpPtr, ebx
 00000205  8B 5D 0C			mov ebx, a3
 00000208  89 1D 00000014 E		mov asteroid2.bmpPtr, ebx
 0000020E  89 1D 00000014 E		mov asteroid3.bmpPtr, ebx
 00000214  8B 5D 10			mov ebx, cage
 00000217  89 1D 00000014 E		mov cage1.bmpPtr, ebx
 0000021D  89 1D 00000014 E		mov cage2.bmpPtr, ebx
					;; set everything to alive again
 00000223  C7 05 0000000C E		mov asteroid1.alive, 1
	   00000001
 0000022D  C7 05 0000000C E		mov asteroid2.alive, 1
	   00000001
 00000237  C7 05 0000000C E		mov asteroid3.alive, 1
	   00000001
 00000241  C7 05 0000000C E		mov cage1.alive, 1
	   00000001
 0000024B  C7 05 0000000C E		mov cage2.alive, 1
	   00000001
					;; set everything to visible again
 00000255  C7 05 00000010 E		mov asteroid1.visible, 1
	   00000001
 0000025F  C7 05 00000010 E		mov asteroid2.visible, 1
	   00000001
 00000269  C7 05 00000010 E		mov asteroid3.visible, 1
	   00000001
 00000273  C7 05 00000010 E		mov cage1.visible, 1
	   00000001
 0000027D  C7 05 00000010 E		mov cage2.visible,1
	   00000001

					;; each reset move enemies 15*num_resets to the right
 00000287  83 3D 00000000 E		cmp num_loops, 5
	   05
 0000028E  7F 2C			jg reset_loops
 00000290  A1 00000000 E		mov eax, num_loops
 00000295  BB 0000000F			mov ebx, 15
 0000029A  F7 E3			mul ebx
 0000029C  01 05 00000000 E		add asteroid1.x, eax
 000002A2  01 05 00000000 E		add asteroid2.x, eax
 000002A8  01 05 00000000 E		add asteroid3.x, eax
 000002AE  01 05 00000000 E		add cage1.x, eax
 000002B4  01 05 00000000 E		add cage2.x, eax
 000002BA  EB 3C			jmp reset_y

 000002BC			reset_loops:
 000002BC  C7 05 00000000 E		mov num_loops, 0
	   00000000
 000002C6  C7 05 00000000 E		mov asteroid1.x, 90
	   0000005A
 000002D0  C7 05 00000000 E		mov asteroid2.x, 180
	   000000B4
 000002DA  C7 05 00000000 E		mov asteroid3.x, 500
	   000001F4
 000002E4  C7 05 00000000 E		mov cage1.x, 300
	   0000012C
 000002EE  C7 05 00000000 E		mov cage2.x, 35
	   00000023

 000002F8			reset_y:
 000002F8  C7 05 00000004 E		mov asteroid1.y, -10
	   FFFFFFF6
 00000302  C7 05 00000004 E		mov asteroid2.y, -500
	   FFFFFE0C
 0000030C  C7 05 00000004 E		mov asteroid3.y, -100
	   FFFFFF9C
 00000316  C7 05 00000004 E		mov cage1.y, -300
	   FFFFFED4
 00000320  C7 05 00000004 E		mov cage2.y, -50
	   FFFFFFCE
					
 0000032A			done:	
					ret
 00000330			GameReset ENDP
					
 00000330			CheckCollision PROC USES ebx ecx edx
					;; first check if projectile out of bounds and if so flip shot bool
 00000333  83 3D 00000000 E		cmp shot, 0
	   00
 0000033A  0F 84 000001B5		je check_enemies
 00000340  83 3D 00000004 E		cmp projectile.y, 15
	   0F
 00000347  7F 06			jg check_projectile_hit
 00000349  F7 15 00000000 E		not shot 		;flip shot bool cause out of bounds

					;; all of the 'magic numbers' hardcoded for collision boundaries were determined through looking at image size in pixels and testing what made sense
 0000034F			check_projectile_hit:
 0000034F  8B 0D 00000000 E		mov ecx, projectile.x
 00000355  8B 15 00000004 E		mov edx, projectile.y
					;; check if projectile hit enemy (need to check each enemy)
					;; if (cage1.x - 30 < projectile.x && cage1.x + 30 > projectile.x && cage1.y + 20  >= projectile.y && cage1.y - 20 <= projectile.y) then collision
 0000035B  83 3D 00000010 E		cmp cage1.visible, 0
	   00
 00000362  74 49			je c2proj
 00000364  8B 1D 00000000 E		mov ebx, cage1.x
 0000036A  83 EB 1E			sub ebx, 30
 0000036D  3B D9			cmp ebx, ecx
 0000036F  7F 3C			jg c2proj
 00000371  83 C3 3C			add ebx, 60
 00000374  3B D9			cmp ebx, ecx
 00000376  7C 35			jl c2proj
 00000378  8B 1D 00000004 E		mov ebx, cage1.y
 0000037E  83 C3 1E			add ebx, 30
 00000381  3B DA			cmp ebx, edx
 00000383  7C 28			jl c2proj
 00000385  83 EB 3C			sub ebx, 60
 00000388  3B DA			cmp ebx, edx
 0000038A  7F 21			jg c2proj
 0000038C  C7 05 0000000C E		mov cage1.alive, 0
	   00000000
 00000396  F7 15 00000000 E		not shot
					INVOKE PlaySound, OFFSET yelling, 0, SND_ASYNC+SND_FILENAME 
 000003AD			c2proj:
 000003AD  83 3D 00000010 E		cmp cage2.visible, 0
	   00
 000003B4  74 49			je a1proj
 000003B6  8B 1D 00000000 E		mov ebx, cage2.x
 000003BC  83 EB 1E			sub ebx, 30
 000003BF  3B D9			cmp ebx, ecx
 000003C1  7F 3C			jg a1proj
 000003C3  83 C3 3C			add ebx, 60
 000003C6  3B D9			cmp ebx, ecx
 000003C8  7C 35			jl a1proj
 000003CA  8B 1D 00000004 E		mov ebx, cage2.y
 000003D0  83 C3 1E			add ebx, 30
 000003D3  3B DA			cmp ebx, edx
 000003D5  7C 28			jl a1proj
 000003D7  83 EB 3C			sub ebx, 60
 000003DA  3B DA			cmp ebx, edx
 000003DC  7F 21			jg a1proj
 000003DE  C7 05 0000000C E		mov cage2.alive, 0
	   00000000
 000003E8  F7 15 00000000 E		not shot
					INVOKE PlaySound, OFFSET yelling, 0, SND_ASYNC+SND_FILENAME
 000003FF			a1proj:
 000003FF  83 3D 00000010 E		cmp asteroid1.visible, 0
	   00
 00000406  74 49			je a2proj
 00000408  8B 1D 00000000 E		mov ebx, asteroid1.x
 0000040E  83 EB 0F			sub ebx, 15
 00000411  3B D9			cmp ebx, ecx
 00000413  7F 3C			jg a2proj
 00000415  83 C3 1E			add ebx, 30
 00000418  3B D9			cmp ebx, ecx
 0000041A  7C 35			jl a2proj
 0000041C  8B 1D 00000004 E		mov ebx, asteroid1.y
 00000422  83 C3 10			add ebx, 16
 00000425  3B DA			cmp ebx, edx
 00000427  7C 28			jl a2proj
 00000429  83 EB 20			sub ebx, 32
 0000042C  3B DA			cmp ebx, edx
 0000042E  7F 21			jg a2proj
 00000430  C7 05 0000000C E		mov asteroid1.alive, 0
	   00000000
 0000043A  F7 15 00000000 E		not shot
					INVOKE PlaySound, OFFSET explosion_sound, 0, SND_ASYNC+SND_FILENAME
 00000451			a2proj:
 00000451  83 3D 00000010 E		cmp asteroid2.visible, 0
	   00
 00000458  74 49			je a3proj
 0000045A  8B 1D 00000000 E		mov ebx, asteroid2.x
 00000460  83 EB 16			sub ebx, 22
 00000463  3B D9			cmp ebx, ecx
 00000465  7F 3C			jg a3proj
 00000467  83 C3 2C			add ebx, 44
 0000046A  3B D9			cmp ebx, ecx
 0000046C  7C 35			jl a3proj
 0000046E  8B 1D 00000004 E		mov ebx, asteroid2.y
 00000474  83 C3 16			add ebx, 22
 00000477  3B DA			cmp ebx, edx
 00000479  7C 28			jl a3proj
 0000047B  83 EB 2C			sub ebx, 44
 0000047E  3B DA			cmp ebx, edx
 00000480  7F 21			jg a3proj
 00000482  C7 05 0000000C E		mov asteroid2.alive, 0
	   00000000
 0000048C  F7 15 00000000 E		not shot
					INVOKE PlaySound, OFFSET explosion_sound, 0, SND_ASYNC+SND_FILENAME
 000004A3			a3proj:
 000004A3  83 3D 00000010 E		cmp asteroid3.visible, 0
	   00
 000004AA  74 49			je check_enemies
 000004AC  8B 1D 00000000 E		mov ebx, asteroid3.x
 000004B2  83 EB 16			sub ebx, 22
 000004B5  3B D9			cmp ebx, ecx
 000004B7  7F 3C			jg check_enemies
 000004B9  83 C3 2C			add ebx, 44
 000004BC  3B D9			cmp ebx, ecx
 000004BE  7C 35			jl check_enemies
 000004C0  8B 1D 00000004 E		mov ebx, asteroid3.y
 000004C6  83 C3 16			add ebx, 22
 000004C9  3B DA			cmp ebx, edx
 000004CB  7C 28			jl check_enemies
 000004CD  83 EB 2C			sub ebx, 44
 000004D0  3B DA			cmp ebx, edx
 000004D2  7F 21			jg check_enemies
 000004D4  C7 05 0000000C E		mov asteroid3.alive, 0
	   00000000
 000004DE  F7 15 00000000 E		not shot
					INVOKE PlaySound, OFFSET explosion_sound, 0, SND_ASYNC+SND_FILENAME
					
 000004F5			check_enemies:
					;; check if any objects collide with the player (need to check each enemy vs player)
 000004F5  8B 0D 00000000 E		mov ecx, ship.x
 000004FB  8B 15 00000004 E		mov edx, ship.y

 00000501  83 3D 00000010 E		cmp cage1.visible, 0
	   00
 00000508  74 32			je c2ship
 0000050A  8B 1D 00000000 E		mov ebx, cage1.x
 00000510  83 EB 1E			sub ebx, 30
 00000513  3B D9			cmp ebx, ecx
 00000515  7F 25			jg c2ship
 00000517  83 C3 3C			add ebx, 60
 0000051A  3B D9			cmp ebx, ecx
 0000051C  7C 1E			jl c2ship
 0000051E  8B 1D 00000004 E		mov ebx, cage1.y
 00000524  83 C3 1E			add ebx, 30
 00000527  3B DA			cmp ebx, edx
 00000529  7C 11			jl c2ship
 0000052B  83 EB 3C			sub ebx, 60
 0000052E  3B DA			cmp ebx, edx
 00000530  7F 0A			jg c2ship
 00000532  C7 05 00000000 E		mov over, 1
	   00000001
 0000053C			c2ship:
 0000053C  83 3D 00000010 E		cmp cage2.visible, 0
	   00
 00000543  74 32			je a1ship
 00000545  8B 1D 00000000 E		mov ebx, cage2.x
 0000054B  83 EB 1E			sub ebx, 30
 0000054E  3B D9			cmp ebx, ecx
 00000550  7F 25			jg a1ship
 00000552  83 C3 3C			add ebx, 60
 00000555  3B D9			cmp ebx, ecx
 00000557  7C 1E			jl a1ship
 00000559  8B 1D 00000004 E		mov ebx, cage2.y
 0000055F  83 C3 1E			add ebx, 30
 00000562  3B DA			cmp ebx, edx
 00000564  7C 11			jl a1ship
 00000566  83 EB 3C			sub ebx, 60
 00000569  3B DA			cmp ebx, edx
 0000056B  7F 0A			jg a1ship
 0000056D  C7 05 00000000 E		mov over, 1
	   00000001
 00000577			a1ship:
 00000577  83 3D 00000010 E		cmp asteroid1.visible, 0
	   00
 0000057E  74 32			je a2ship
 00000580  8B 1D 00000000 E		mov ebx, asteroid1.x
 00000586  83 EB 0F			sub ebx, 15
 00000589  3B D9			cmp ebx, ecx
 0000058B  7F 25			jg a2ship
 0000058D  83 C3 1E			add ebx, 30
 00000590  3B D9			cmp ebx, ecx
 00000592  7C 1E			jl a2ship
 00000594  8B 1D 00000004 E		mov ebx, asteroid1.y
 0000059A  83 C3 10			add ebx, 16
 0000059D  3B DA			cmp ebx, edx
 0000059F  7C 11			jl a2ship
 000005A1  83 EB 20			sub ebx, 32
 000005A4  3B DA			cmp ebx, edx
 000005A6  7F 0A			jg a2ship
 000005A8  C7 05 00000000 E		mov over, 1
	   00000001
 000005B2			a2ship:
 000005B2  83 3D 00000010 E		cmp asteroid2.visible, 0
	   00
 000005B9  74 32			je a3ship
 000005BB  8B 1D 00000000 E		mov ebx, asteroid2.x
 000005C1  83 EB 16			sub ebx, 22
 000005C4  3B D9			cmp ebx, ecx
 000005C6  7F 25			jg a3ship
 000005C8  83 C3 2C			add ebx, 44
 000005CB  3B D9			cmp ebx, ecx
 000005CD  7C 1E			jl a3ship
 000005CF  8B 1D 00000004 E		mov ebx, asteroid2.y
 000005D5  83 C3 16			add ebx, 22
 000005D8  3B DA			cmp ebx, edx
 000005DA  7C 11			jl a3ship
 000005DC  83 EB 2C			sub ebx, 44
 000005DF  3B DA			cmp ebx, edx
 000005E1  7F 0A			jg a3ship
 000005E3  C7 05 00000000 E		mov over, 1
	   00000001
 000005ED			a3ship:
 000005ED  83 3D 00000010 E		cmp asteroid3.visible, 0
	   00
 000005F4  74 32			je done
 000005F6  8B 1D 00000000 E		mov ebx, asteroid3.x
 000005FC  83 EB 16			sub ebx, 22
 000005FF  3B D9			cmp ebx, ecx
 00000601  7F 25			jg done
 00000603  83 C3 2C			add ebx, 44
 00000606  3B D9			cmp ebx, ecx
 00000608  7C 1E			jl done
 0000060A  8B 1D 00000004 E		mov ebx, asteroid3.y
 00000610  83 C3 16			add ebx, 22
 00000613  3B DA			cmp ebx, edx
 00000615  7C 11			jl done
 00000617  83 EB 2C			sub ebx, 44
 0000061A  3B DA			cmp ebx, edx
 0000061C  7F 0A			jg done
 0000061E  C7 05 00000000 E		mov over, 1
	   00000001
					
 00000628			done: 
					ret
 0000062C			CheckCollision ENDP

 0000062C			Shoot PROC USES ebx ecx edx
 0000062F  83 3D 00000000 E		cmp shot, 0
	   00
 00000636  75 3E			jne done
 00000638  BB 00000000 E		mov ebx, offset ship
 0000063D  8B 0B			mov ecx, (SPRITE PTR [ebx]).x
 0000063F  89 0D 00000000 E		mov projectile.x, ecx
 00000645  8B 4B 04			mov ecx, (SPRITE PTR [ebx]).y
 00000648  89 0D 00000004 E		mov projectile.y, ecx
 0000064E  83 2D 00000004 E		sub projectile.y, 28
	   1C
 00000655  C7 05 00000008 E		mov projectile.a, 0
	   00000000
					INVOKE PlaySound, OFFSET pew, 0, SND_ASYNC+SND_FILENAME
 00000670  F7 15 00000000 E		not shot

 00000676			done:
					ret
					
 0000067A			Shoot ENDP
					
 0000067A			MoveShip PROC USES ebx ecx shipArg:PTR SPRITE, key: DWORD
 0000067F  8B 4D 0C			mov ecx, key
 00000682  83 F9 25			cmp ecx, VK_LEFT
 00000685  74 39			je left
 00000687  83 F9 27			cmp ecx, VK_RIGHT
 0000068A  74 43			je right
 0000068C  83 F9 26			cmp ecx, VK_UP
 0000068F  74 07			je up
 00000691  83 F9 28			cmp ecx, VK_DOWN
 00000694  74 16			je down
 00000696  EB 47			jmp done

 00000698			up:
 00000698  8B 5D 08			mov ebx, shipArg
 0000069B  8B 4B 04			mov ecx, (SPRITE PTR [ebx]).y
 0000069E  81 F9 00000145		cmp ecx, 325
 000006A4  7C 39			jl done
 000006A6  83 6B 04 0F			sub (SPRITE PTR [ebx]).y, 15
 000006AA  EB 33			jmp done

 000006AC			down:
 000006AC  8B 5D 08			mov ebx, shipArg
 000006AF  8B 4B 04			mov ecx, (SPRITE PTR [ebx]).y
 000006B2  81 F9 0000019F		cmp ecx, 415
 000006B8  7F 25			jg done
 000006BA  83 43 04 0F			add (SPRITE PTR [ebx]).y, 15
 000006BE  EB 1F			jmp done

					
 000006C0			left:
 000006C0  8B 5D 08			mov ebx, shipArg
 000006C3  8B 0B			mov ecx, (SPRITE PTR [ebx]).x
 000006C5  83 F9 1E			cmp ecx, 30 		;check so you don't go out of bounds
 000006C8  7C 15			jl done
 000006CA  83 2B 0F			sub (SPRITE PTR[ebx]).x, 15;	
 000006CD  EB 10			jmp done

 000006CF			right: 
 000006CF  8B 5D 08			mov ebx, shipArg
 000006D2  8B 0B			mov ecx, (SPRITE PTR[ebx]).x
 000006D4  81 F9 00000258		cmp ecx, 600		;check so you don't go out of bounds
 000006DA  7F 03			jg done
 000006DC  83 03 0F			add (SPRITE PTR[ebx]).x, 15

 000006DF			done:
					ret
 000006E5			MoveShip ENDP
					
				END
Microsoft (R) Macro Assembler Version 6.14.8444		    03/13/14 22:44:33
logic.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

_EECS205BITMAP . . . . . . . . .	 00000010
  dwWidth  . . . . . . . . . . .	 00000000	 DWord
  dwHeight . . . . . . . . . . .	 00000004	 DWord
  bTransparent . . . . . . . . .	 00000008	 Byte
  lpBytes  . . . . . . . . . . .	 0000000C	 DWord
_SPRITE  . . . . . . . . . . . .	 00000018
  x  . . . . . . . . . . . . . .	 00000000	 DWord
  y  . . . . . . . . . . . . . .	 00000004	 DWord
  a  . . . . . . . . . . . . . .	 00000008	 DWord
  alive  . . . . . . . . . . . .	 0000000C	 DWord
  visible  . . . . . . . . . . .	 00000010	 DWord
  bmpPtr . . . . . . . . . . . .	 00000014	 DWord


Types:

                N a m e                  Size     Attr

EECS205BITMAP  . . . . . . . . .	 00000010     _EECS205BITMAP 
FIXED  . . . . . . . . . . . . .	 00000004     DWord 
SPRITE . . . . . . . . . . . . .	 00000018     _SPRITE 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000021 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006E5 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BasicBlit  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BeginDraw  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BlitReg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CheckCollision . . . . . . . . .	P Near	 00000330 _TEXT	Length= 000002FC Public STDCALL
  check_projectile_hit . . . . .	L Near	 0000034F _TEXT	
  c2proj . . . . . . . . . . . .	L Near	 000003AD _TEXT	
  a1proj . . . . . . . . . . . .	L Near	 000003FF _TEXT	
  a2proj . . . . . . . . . . . .	L Near	 00000451 _TEXT	
  a3proj . . . . . . . . . . . .	L Near	 000004A3 _TEXT	
  check_enemies  . . . . . . . .	L Near	 000004F5 _TEXT	
  c2ship . . . . . . . . . . . .	L Near	 0000053C _TEXT	
  a1ship . . . . . . . . . . . .	L Near	 00000577 _TEXT	
  a2ship . . . . . . . . . . . .	L Near	 000005B2 _TEXT	
  a3ship . . . . . . . . . . . .	L Near	 000005ED _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000628 _TEXT	
DrawAllStars . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawStarReg  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EndDraw  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FixedCos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FixedMult  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FixedSin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameInit . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameLogic  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
  key  . . . . . . . . . . . . .	DWord	 bp + 00000008
  ship1  . . . . . . . . . . . .	DWord	 bp + 0000000C
  ship2  . . . . . . . . . . . .	DWord	 bp + 00000010
  ship3  . . . . . . . . . . . .	DWord	 bp + 00000014
  exp  . . . . . . . . . . . . .	DWord	 bp + 00000018
  a1 . . . . . . . . . . . . . .	DWord	 bp + 0000001C
  a3 . . . . . . . . . . . . . .	DWord	 bp + 00000020
  cage . . . . . . . . . . . . .	DWord	 bp + 00000024
  changeship2  . . . . . . . . .	L Near	 0000001A _TEXT	
  changeship3  . . . . . . . . .	L Near	 00000025 _TEXT	
  sprite_same  . . . . . . . . .	L Near	 0000002E _TEXT	
  move . . . . . . . . . . . . .	L Near	 0000003D _TEXT	
  finish_up  . . . . . . . . . .	L Near	 0000004A _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000005A _TEXT	
GameMain . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameRender . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameReset  . . . . . . . . . . .	P Near	 000001F7 _TEXT	Length= 00000139 Public STDCALL
  a1 . . . . . . . . . . . . . .	DWord	 bp + 00000008
  a3 . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  cage . . . . . . . . . . . . .	DWord	 bp + 00000010
  reset_loops  . . . . . . . . .	L Near	 000002BC _TEXT	
  reset_y  . . . . . . . . . . .	L Near	 000002F8 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000032A _TEXT	
MoveShip . . . . . . . . . . . .	P Near	 0000067A _TEXT	Length= 0000006B Public STDCALL
  shipArg  . . . . . . . . . . .	DWord	 bp + 00000008
  key  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  up . . . . . . . . . . . . . .	L Near	 00000698 _TEXT	
  down . . . . . . . . . . . . .	L Near	 000006AC _TEXT	
  left . . . . . . . . . . . . .	L Near	 000006C0 _TEXT	
  right  . . . . . . . . . . . .	L Near	 000006CF _TEXT	
  done . . . . . . . . . . . . .	L Near	 000006DF _TEXT	
PlaySoundA . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RotateBlit . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Shoot  . . . . . . . . . . . . .	P Near	 0000062C _TEXT	Length= 0000004E Public STDCALL
  done . . . . . . . . . . . . .	L Near	 00000676 _TEXT	
UpdateEnemyPos . . . . . . . . .	P Near	 00000075 _TEXT	Length= 00000182 Public STDCALL
  a1 . . . . . . . . . . . . . .	DWord	 bp + 00000008
  a3 . . . . . . . . . . . . . .	DWord	 bp + 0000000C
  cage . . . . . . . . . . . . .	DWord	 bp + 00000010
  exp  . . . . . . . . . . . . .	DWord	 bp + 00000014
  reset  . . . . . . . . . . . .	L Near	 000000BA _TEXT	
  update . . . . . . . . . . . .	L Near	 000000CE _TEXT	
  c1dead . . . . . . . . . . . .	L Near	 000000E7 _TEXT	
  c1done . . . . . . . . . . . .	L Near	 00000100 _TEXT	
  c2 . . . . . . . . . . . . . .	L Near	 0000010A _TEXT	
  c2dead . . . . . . . . . . . .	L Near	 00000121 _TEXT	
  c2done . . . . . . . . . . . .	L Near	 0000013A _TEXT	
  as1  . . . . . . . . . . . . .	L Near	 00000144 _TEXT	
  as1dead  . . . . . . . . . . .	L Near	 0000015B _TEXT	
  as1done  . . . . . . . . . . .	L Near	 00000174 _TEXT	
  as2  . . . . . . . . . . . . .	L Near	 0000017E _TEXT	
  as2dead  . . . . . . . . . . .	L Near	 00000195 _TEXT	
  as2done  . . . . . . . . . . .	L Near	 000001AE _TEXT	
  as3  . . . . . . . . . . . . .	L Near	 000001B8 _TEXT	
  as3dead  . . . . . . . . . . .	L Near	 000001CF _TEXT	
  as3done  . . . . . . . . . . .	L Near	 000001E8 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001F2 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
FIXED_ANGLE_ROTATE . . . . . . .	Number	 00000064h   
PROJECTILE_ACCEL . . . . . . . .	Number	 0000000Ah   
PlaySound  . . . . . . . . . . .	Text   	 PlaySoundA
SINTAB . . . . . . . . . . . . .	Word	 00000000 FLAT	External STDCALL
SND_ASYNC  . . . . . . . . . . .	Number	 00000001h   
SND_FILENAME . . . . . . . . . .	Number	 00020000h   
StarBitmap . . . . . . . . . . .	_EECS205BITMAP  00000000 FLAT	External STDCALL
VK_0 . . . . . . . . . . . . . .	Number	 00000030h   
VK_1 . . . . . . . . . . . . . .	Number	 00000031h   
VK_2 . . . . . . . . . . . . . .	Number	 00000032h   
VK_3 . . . . . . . . . . . . . .	Number	 00000033h   
VK_4 . . . . . . . . . . . . . .	Number	 00000034h   
VK_5 . . . . . . . . . . . . . .	Number	 00000035h   
VK_6 . . . . . . . . . . . . . .	Number	 00000036h   
VK_7 . . . . . . . . . . . . . .	Number	 00000037h   
VK_8 . . . . . . . . . . . . . .	Number	 00000038h   
VK_9 . . . . . . . . . . . . . .	Number	 00000039h   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_ATTN  . . . . . . . . . . . .	Number	 000000F6h   
VK_A . . . . . . . . . . . . . .	Number	 00000041h   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_B . . . . . . . . . . . . . .	Number	 00000042h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_CRSEL . . . . . . . . . . . .	Number	 000000F7h   
VK_C . . . . . . . . . . . . . .	Number	 00000043h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_D . . . . . . . . . . . . . .	Number	 00000044h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_EREOF . . . . . . . . . . . .	Number	 000000F9h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_EXSEL . . . . . . . . . . . .	Number	 000000F8h   
VK_E . . . . . . . . . . . . . .	Number	 00000045h   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_F . . . . . . . . . . . . . .	Number	 00000046h   
VK_G . . . . . . . . . . . . . .	Number	 00000047h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_H . . . . . . . . . . . . . .	Number	 00000048h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_I . . . . . . . . . . . . . .	Number	 00000049h   
VK_J . . . . . . . . . . . . . .	Number	 0000004Ah   
VK_K . . . . . . . . . . . . . .	Number	 0000004Bh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_L . . . . . . . . . . . . . .	Number	 0000004Ch   
VK_MBUTTON . . . . . . . . . . .	Number	 00000004h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_M . . . . . . . . . . . . . .	Number	 0000004Dh   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NONAME  . . . . . . . . . . .	Number	 000000FCh   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_N . . . . . . . . . . . . . .	Number	 0000004Eh   
VK_OEM_CLEAR . . . . . . . . . .	Number	 000000FEh   
VK_O . . . . . . . . . . . . . .	Number	 0000004Fh   
VK_PA1 . . . . . . . . . . . . .	Number	 000000FDh   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PGDN  . . . . . . . . . . . .	Number	 00000022h   
VK_PGUP  . . . . . . . . . . . .	Number	 00000021h   
VK_PLAY  . . . . . . . . . . . .	Number	 000000FAh   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_P . . . . . . . . . . . . . .	Number	 00000050h   
VK_Q . . . . . . . . . . . . . .	Number	 00000051h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_R . . . . . . . . . . . . . .	Number	 00000052h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SELECT  . . . . . . . . . . .	Number	 00000029h   
VK_SEPARATOR . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_S . . . . . . . . . . . . . .	Number	 00000053h   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_T . . . . . . . . . . . . . .	Number	 00000054h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
VK_U . . . . . . . . . . . . . .	Number	 00000055h   
VK_V . . . . . . . . . . . . . .	Number	 00000056h   
VK_W . . . . . . . . . . . . . .	Number	 00000057h   
VK_X . . . . . . . . . . . . . .	Number	 00000058h   
VK_Y . . . . . . . . . . . . . .	Number	 00000059h   
VK_ZOOM  . . . . . . . . . . . .	Number	 000000FBh   
VK_Z . . . . . . . . . . . . . .	Number	 0000005Ah   
WinMain  . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
asteroid1  . . . . . . . . . . .	_SPRITE	 00000000 FLAT	External STDCALL
asteroid2  . . . . . . . . . . .	_SPRITE	 00000000 FLAT	External STDCALL
asteroid3  . . . . . . . . . . .	_SPRITE	 00000000 FLAT	External STDCALL
cage1  . . . . . . . . . . . . .	_SPRITE	 00000000 FLAT	External STDCALL
cage2  . . . . . . . . . . . . .	_SPRITE	 00000000 FLAT	External STDCALL
dwPitch  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
explosion_sound  . . . . . . . .	Byte	 00000008 _DATA	
lpDisplayBits  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
lpTyroneBmp  . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
num_loops  . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
over . . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
pew  . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
projectile . . . . . . . . . . .	_SPRITE	 00000000 FLAT	External STDCALL
ship . . . . . . . . . . . . . .	_SPRITE	 00000000 FLAT	External STDCALL
shot . . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
yelling  . . . . . . . . . . . .	Byte	 00000016 _DATA	

	   0 Warnings
	   0 Errors
